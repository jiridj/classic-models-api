name: Build and Push Docker Image

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  debug:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Debug tag push
      run: |
        echo "Tag pushed: ${{ github.ref_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Event: ${{ github.event_name }}"

  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version and check if latest
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=true" >> $GITHUB_OUTPUT
          
          # Check if this is the latest semver version
          CURRENT_VERSION=${VERSION#v}  # Remove 'v' prefix
          echo "Current version: $CURRENT_VERSION"
          
          # Get all existing tags and find the highest semver version including current
          ALL_TAGS=$(git tag -l 'v*' | sed 's/v//' | sort -V)
          HIGHEST_TAG=$(echo "$ALL_TAGS $CURRENT_VERSION" | tr ' ' '\n' | sort -V | tail -1)
          echo "All existing tags: $ALL_TAGS"
          echo "Highest version (including current): $HIGHEST_TAG"
          
          if [[ "$CURRENT_VERSION" == "$HIGHEST_TAG" ]]; then
            echo "is_latest=true" >> $GITHUB_OUTPUT
            echo "This is the latest version: $VERSION"
          else
            echo "is_latest=false" >> $GITHUB_OUTPUT
            echo "This is not the latest version. Latest is: v$HIGHEST_TAG"
          fi
        else
          VERSION="dev-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_release=false" >> $GITHUB_OUTPUT
          echo "is_latest=false" >> $GITHUB_OUTPUT
        fi
        echo "Extracted version: $VERSION"

    - name: Update API version in settings
      if: steps.version.outputs.is_release == 'true'
      run: |
        VERSION=${{ steps.version.outputs.version }}
        # Remove 'v' prefix if present
        CLEAN_VERSION=${VERSION#v}
        echo "Updating API version to: $CLEAN_VERSION"
        
        # Update the version in settings
        sed -i "s/\"VERSION\": \"[^\"]*\"/\"VERSION\": \"$CLEAN_VERSION\"/" config/settings/base.py
        
        # Commit the version update
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add config/settings/base.py
        git commit -m "Update API version to $CLEAN_VERSION" || echo "No changes to commit"
        git tag -f $VERSION || echo "Tag already exists"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable=${{ steps.version.outputs.is_latest == 'true' }}
          type=raw,value=${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.is_release == 'true' }}

    - name: Build and push Docker image
      if: steps.version.outputs.is_release == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          API_VERSION=${{ steps.version.outputs.version }}

    - name: Create release body
      if: steps.version.outputs.is_release == 'true'
      id: release_body
      run: |
        BODY="## Release ${{ steps.version.outputs.version }}
        
        ### Docker Image
        - **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\`"
        
        if [[ "${{ steps.version.outputs.is_latest }}" == "true" ]]; then
          BODY="$BODY
        - **Latest**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`"
        fi
        
        BODY="$BODY
        
        ### API Documentation
        - **Swagger UI**: \`/api/docs/\`
        - **ReDoc**: \`/api/redoc/\`
        - **OpenAPI Schema**: \`/api/schema/\`
        
        ### Deployment
        Update your Docker Compose file to use the new version:
        \`\`\`yaml
        api:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        \`\`\`"
        
        if [[ "${{ steps.version.outputs.is_latest }}" == "true" ]]; then
          BODY="$BODY
        
        **Note**: This is the latest version and has been tagged as \`latest\`."
        fi
        
        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo "$BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      if: steps.version.outputs.is_release == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: ${{ steps.release_body.outputs.body }}
        draft: false
        prerelease: false
